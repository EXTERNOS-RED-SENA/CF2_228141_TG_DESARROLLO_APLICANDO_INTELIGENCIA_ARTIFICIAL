{"remainingRequest":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema3.vue?vue&type=template&id=1c224646&lang=pug","dependencies":[{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema3.vue","mtime":1734972039112},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF2_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDMKICAgICAgaDEgTW9kZWxhZG8gZGUgbGEgZXN0cnVjdHVyYSBkZSBkYXRvcyBubyByZWxhY2lvbmFsCQoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zMy5wbmcnIGFsdD0nJykgCiAgICAgIC5jb2wtbGctNS5teS1sZy0wLm15LTMuajEKICAgICAgICAuYmc0LnAtNC5qMS5oLTEwMAogICAgICAgICAgcC5tYi0wIEVsIG1vZGVsYWRvIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWwgaGEgZ2FuYWRvIGltcG9ydGFuY2lhIGNvbiBlbCBhdWdlIGRlIGxhcyBhcGxpY2FjaW9uZXMgbW9kZXJuYXMgcXVlIHJlcXVpZXJlbiBhbHRhIGZsZXhpYmlsaWRhZCB5IGVzY2FsYWJpbGlkYWQuIEEgZGlmZXJlbmNpYSBkZSBsYXMgYmFzZXMgZGUgZGF0b3MgcmVsYWNpb25hbGVzLCBsYXMgbm8gcmVsYWNpb25hbGVzIGFsbWFjZW5hbiBkYXRvcyBzaW4gdW5hIGVzdHJ1Y3R1cmEgcsOtZ2lkYSBkZSB0YWJsYXMsIGxvIHF1ZSBsYXMgaGFjZSBpZGVhbGVzIHBhcmEgbWFuZWphciBpbmZvcm1hY2nDs24gc2VtaWVzdHJ1Y3R1cmFkYSBvIG5vIGVzdHJ1Y3R1cmFkYSwgY29tbyBkb2N1bWVudG9zLCBhcmNoaXZvcyBKU09OIG8gZGF0b3MgZW4gbWVtb3JpYS4gRXN0ZSB0ZW1hIGV4cGxvcmEgbG9zIGRpZmVyZW50ZXMgdGlwb3MgZGUgYmFzZXMgZGUgZGF0b3Mgbm8gcmVsYWNpb25hbGVzLCBzdXMgZXN0cnVjdHVyYXMsIHkgbGFzIGhlcnJhbWllbnRhcyBxdWUgcGVybWl0ZW4gbW9kZWxhciB5IGdlc3Rpb25hciBlZmljaWVudGVtZW50ZSBlc3RvcyBkYXRvcy4KICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMy5qMQogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM0LnBuZycgYWx0PScnKSAKCgogICAgU2VwYXJhZG9yIAogICAgI3RfM18xLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgaDIgMy4xCVRpcG9zIGRlIGJhc2VzIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWxlcwogICAgcCBMYXMgYmFzZXMgZGUgZGF0b3Mgbm8gcmVsYWNpb25hbGVzIChvIE5vU1FMKSBzZSBjbGFzaWZpY2FuIGVuIHZhcmlhcyBjYXRlZ29yw61hcywgY2FkYSB1bmEgZGlzZcOxYWRhIHBhcmEgY2Fzb3MgZGUgdXNvIGVzcGVjw61maWNvcy4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIgIAogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzcucG5nJyBhbHQ9JycpICAgICAgICAKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgIEFjY29yZGlvblJFRCh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGJnNyIpCiAgICAgICAgICBkaXYodGl0dWxvPSJCYXNlcyBkZSBkYXRvcyBkZSB0aXBvIGNsYXZlLXZhbG9yIikKICAgICAgICAgICAgcCBFc3RhcyBiYXNlcyBhbG1hY2VuYW4gZGF0b3MgY29tbyBwYXJlcyBjbGF2ZS12YWxvciwgZG9uZGUgY2FkYSBjbGF2ZSBlcyDDum5pY2EgeSBzZSBhc29jaWEgY29uIHVuIHZhbG9yLiBTb24gw7p0aWxlcyBwYXJhIGFsbWFjZW5hciBkYXRvcyBzaW1wbGVzIHkgcsOhcGlkb3MgZGUgcmVjdXBlcmFyLCBjb21vIHNlc2lvbmVzIGRlIHVzdWFyaW8uIEVqZW1wbG86IFJlZGlzIHkgQW1hem9uIER5bmFtb0RCIHNvbiBiYXNlcyBkZSBkYXRvcyBjbGF2ZS12YWxvciBxdWUgc2UgdXRpbGl6YW4gYW1wbGlhbWVudGUgcGFyYSBjYWNow6lzIHkgc2lzdGVtYXMgZGUgYsO6c3F1ZWRhIHLDoXBpZGEuCiAgICAgICAgICBkaXYodGl0dWxvPSJCYXNlcyBkZSBkYXRvcyBkZSBkb2N1bWVudG9zIikKICAgICAgICAgICAgcCBBbG1hY2VuYW4gZGF0b3MgZW4gZG9jdW1lbnRvcywgdMOtcGljYW1lbnRlIGVuIGZvcm1hdG8gSlNPTiwgQlNPTiBvIFhNTC4gU29uIG11eSDDunRpbGVzIHBhcmEgYXBsaWNhY2lvbmVzIHF1ZSBtYW5lamFuIGRhdG9zIHNlbWllc3RydWN0dXJhZG9zIHkgZGluw6FtaWNvcy4gRWplbXBsbzogTW9uZ29EQiBwZXJtaXRlIGFsbWFjZW5hciB5IGNvbnN1bHRhciBkb2N1bWVudG9zIEpTT04gY29tcGxldG9zLCBsbyBxdWUgZXMgaWRlYWwgcGFyYSBhcGxpY2FjaW9uZXMgd2ViIHF1ZSByZXF1aWVyZW4gdW5hIGVzdHJ1Y3R1cmEgZGUgZGF0b3MgZmxleGlibGUuCiAgICAgICAgICBkaXYodGl0dWxvPSJCYXNlcyBkZSBkYXRvcyBkZSBncmFmb3MiKQogICAgICAgICAgICBwIEVzdGFzIGJhc2VzIHNlIHVzYW4gcGFyYSByZXByZXNlbnRhciB5IGNvbnN1bHRhciByZWxhY2lvbmVzIGNvbXBsZWphcyBlbnRyZSBlbnRpZGFkZXMuIFNvbiBhZGVjdWFkYXMgcGFyYSBhcGxpY2FjaW9uZXMgY29tbyByZWRlcyBzb2NpYWxlcywgZG9uZGUgbGFzIGNvbmV4aW9uZXMgZW50cmUgcGVyc29uYXMgZGViZW4gZ2VzdGlvbmFyc2UgZWZpY2llbnRlbWVudGUuIEVqZW1wbG86IE5lbzRqIGVzIHVuYSBiYXNlIGRlIGRhdG9zIGRlIGdyYWZvcyBxdWUgc2UgdXRpbGl6YSBwYXJhIGFuYWxpemFyIHJlZGVzIHNvY2lhbGVzIG8gc2lzdGVtYXMgZGUgcmVjb21lbmRhY2nDs24uCiAgICAgICAgICBkaXYodGl0dWxvPSJCYXNlcyBkZSBkYXRvcyBvcmllbnRhZGFzIGEgY29sdW1uYXMiKQogICAgICAgICAgICBwIEFsbWFjZW5hbiBkYXRvcyBlbiBjb2x1bW5hcyBlbiBsdWdhciBkZSBmaWxhcywgbG8gcXVlIG1lam9yYSBlbCByZW5kaW1pZW50byBkZSBjb25zdWx0YXMgYW5hbMOtdGljYXMuIFNvbiDDunRpbGVzIGVuIGFwbGljYWNpb25lcyBkZSBhbsOhbGlzaXMgZGUgZ3JhbmRlcyB2b2zDum1lbmVzIGRlIGRhdG9zLCBjb21vIGVuIGxhIGFuYWzDrXRpY2EgZGUgYmlnIGRhdGEuIEVqZW1wbG86IEFwYWNoZSBDYXNzYW5kcmEgeSBIQmFzZSBzb24gYmFzZXMgZGUgZGF0b3Mgb3JpZW50YWRhcyBhIGNvbHVtbmFzIHF1ZSBzZSB1dGlsaXphbiBlbiBzaXN0ZW1hcyBxdWUgcmVxdWllcmVuIGVzY2FsYWJpbGlkYWQgbWFzaXZhIHkgdmVsb2NpZGFkIGVuIGxhIGVzY3JpdHVyYSB5IGxlY3R1cmEgZGUgZGF0b3MuICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlciAKICAgICAgLmNvbC1sZy0xMAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5iZzEzLnRleHQtd2hpdGUucC00LmJyYWQKICAgICAgICAgIC5jb2wtbGctYXV0by5qMQogICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zMi5wbmcnIGFsdD0nJykKICAgICAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00LmoxCiAgICAgICAgICAgIHAubWItMCAjW2IgRWplbXBsbzpdIHVuIHNpc3RlbWEgZGUgY29tZXJjaW8gZWxlY3Ryw7NuaWNvIHF1ZSBuZWNlc2l0YSBhbG1hY2VuYXIgaW5mb3JtYWNpw7NuIGRpdmVyc2Egc29icmUgcHJvZHVjdG9zLCBjYXJyaXRvcyBkZSBjb21wcmEgeSB1c3VhcmlvcyBwb2Ryw61hIHV0aWxpemFyIHVuYSBiYXNlIGRlIGRhdG9zIGRlIGRvY3VtZW50b3MgY29tbyBNb25nb0RCLiBMb3MgZG9jdW1lbnRvcyBwdWVkZW4gdGVuZXIgZXN0cnVjdHVyYXMgZGlmZXJlbnRlcyBwYXJhIHByb2R1Y3RvcyB5IGNhcnJpdG9zLCBzaW4gbmVjZXNpZGFkIGRlIHVuYSBlc3RydWN0dXJhIGZpamEgY29tbyBlbiBsYXMgYmFzZXMgZGUgZGF0b3MgcmVsYWNpb25hbGVzLiAgICAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF8zXzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiAzLjIJRXN0cnVjdHVyYXMgZGUgZGF0b3MgZW4gSlNPTiB5IFhNTAogICAgcCBMb3MgZm9ybWF0b3MgSlNPTiB5IFhNTCBzZSB1dGlsaXphbiBhbXBsaWFtZW50ZSBlbiBiYXNlcyBkZSBkYXRvcyBubyByZWxhY2lvbmFsZXMgcGFyYSBhbG1hY2VuYXIgeSB0cmFuc3BvcnRhciBkYXRvcy4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS00CiAgICAgIC5jb2wtYXV0bwogICAgICAgIGg1LnB5LTIucHgtMy5iZ3QxLmJyYWQgSlNPTiAoSmF2YVNjcmlwdCAjW2VtIE9iamVjdCBOb3RhdGlvbl0pCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQgICAKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgIHAgRXMgdW4gZm9ybWF0byBsaWdlcm8gcXVlIHJlcHJlc2VudGEgZGF0b3MgY29tbyBvYmpldG9zIGNsYXZlLXZhbG9yLCBsbyBxdWUgbG8gaGFjZSBmw6FjaWwgZGUgbGVlciB5IGVzY3JpYmlyIHBhcmEgaHVtYW5vcyB5IG3DoXF1aW5hcy4gU2UgdXNhIGNvbcO6bm1lbnRlIGVuIGFwbGljYWNpb25lcyB3ZWIgeSBzZXJ2aWNpb3MgUkVTVGZ1bC4gCgogICAgICAgIHAgI1tiIEVqZW1wbG86XSBVbiBkb2N1bWVudG8gSlNPTiBxdWUgZGVzY3JpYmUgdW4gcHJvZHVjdG8gcHVlZGUgY29udGVuZXIgY2FtcG9zIGNvbW86CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgICAgIC5jb2wtbGctOCAgCiAgICAgICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNjZmUxZmEgIikgICAgICAKICAgICAgICAgICAgICBjb2RlIHsKICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICB8ICJpZCI6MTAxLCAKICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICB8ICJub21icmUiOiJDYW1pc2V0YSBkZXBvcnRpdmEiLCAKICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICB8ICJwcmVjaW8iOjI1Ljk5LAogICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgIHwgInRhbGxhcyI6WyJTIiwiTSIsICJMIiwgIlhMIl0sIAogICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgIHwgImVuX3N0b2NrIjogdHJ1ZQogICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgIHwgfQogICAgICAKICAgICAgICAvLy0gaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzUucG5nJyBhbHQ9JycpICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNi5wbmcnIGFsdD0nJykgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIHAgQXF1w60sIGVsIGZvcm1hdG8gSlNPTiBwZXJtaXRlIG1hbmVqYXIgbGlzdGFzIHkgdmFsb3JlcyBib29sZWFub3MgZGUgbWFuZXJhIHNlbmNpbGxhLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00ICAKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMy5qMQogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM4LnBuZycgYWx0PScnKSAgICAgICAKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTQKICAgICAgICAgIC5jb2wtYXV0bwogICAgICAgICAgICBoNS5weS0yLnB4LTMuYmd0MS5icmFkIFhNTCAoI1tlbSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZV0pICAgCiAgICAgICAgcCBFcyB1biBmb3JtYXRvIG3DoXMgZXN0cnVjdHVyYWRvIHF1ZSB1dGlsaXphIGV0aXF1ZXRhcyBwYXJhIGRlZmluaXIgZWxlbWVudG9zIHkgc2UgZW1wbGVhIGVuIGFwbGljYWNpb25lcyBxdWUgcmVxdWllcmVuIHZhbGlkYWNpw7NuIHkgZXN0cnVjdHVyYSBtw6FzIHLDrWdpZGEuIAoKCiAgICAgICAgcCAjW2IgRWplbXBsbzpdIHVuIGFyY2hpdm8gWE1MIHBhcmEgdW4gcGVkaWRvIHBvZHLDrWEgdmVyc2UgYXPDrToKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNjZmUxZmEgIikgCiAgICAgICAgICAgICAgICBwcmUKICAgICAgICAgICAgICAgICAgY29kZSAKICAgICAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgICAgICB8Jmx0O3BlZGlkbyZndDsKICAgICAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgICAgICB8ICZsdDtpZCZndDsxMjM0NSZsdDsvaWQmZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCAmbHQ7Y2xpZW50ZSZndDtKdWFuIFDDqXJleiZsdDsvY2xpZW50ZSZndDsKICAgICAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgICAgICB8ICZsdDtwcm9kdWN0b3MmZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCAgICZsdDtwcm9kdWN0byZndDsKICAgICAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgICAgICB8ICAgICAmbHQ7bm9tYnJlJmd0O1BvcnTDoXRpbCZsdDsvbm9tYnJlJmd0OwogICAgICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgICAgIHwgICAgICZsdDtwcmVjaW8mZ3Q7NzUwLjAwJmx0Oy9wcmVjaW8mZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCAgICZsdDsvcHJvZHVjdG8mZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCAmbHQ7cHJvZHVjdG8mZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCAgICZsdDtub21icmUmZ3Q7UmF0w7NuIGluYWzDoW1icmljbyZsdDsvbm9tYnJlJmd0OwogICAgICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgICAgIHwgICAmbHQ7cHJlY2lvJmd0OzI1LjUwJmx0Oy9wcmVjaW8mZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCZsdDsvcHJvZHVjdG8mZ3Q7CiAgICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgICAgfCZsdDsvcHJvZHVjdG9zJmd0OwogICAgICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgICAgIHwgICAmbHQ7L3BlZGlkbyZndDsKCiAgICAgICAgLy8tIGltZy5pbWctYS5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzkucG5nJyBhbHQ9JycpICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBwIFhNTCBlcyDDunRpbCBlbiBzaXN0ZW1hcyBwYXJhIGxhIGludGVyb3BlcmFiaWxpZGFkIGVudHJlIGRpc3RpbnRhcyBwbGF0YWZvcm1hcy4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIgCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmcxMy50ZXh0LXdoaXRlLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzIucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5qMQogICAgICAgICAgICBwLm1iLTAgI1tiIEVqZW1wbG86XSBlbiB1bmEgYXBsaWNhY2nDs24gbcOzdmlsIHF1ZSBjb25zdW1lIGRhdG9zIGRlIHVuIHNlcnZpZG9yLCBsb3MgZGF0b3MgcHVlZGVuIHJlY2liaXJzZSBlbiBmb3JtYXRvIEpTT04gcG9ycXVlIGVzIG3DoXMgbGlnZXJvIHkgc2UgcHJvY2VzYSByw6FwaWRhbWVudGUgZW4gbG9zIG5hdmVnYWRvcmVzIHkgYXBsaWNhY2lvbmVzIG3Ds3ZpbGVzLgoKICAgIFNlcGFyYWRvciAKICAgICN0XzNfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDMuMwlIZXJyYW1pZW50YXMgZGUgbW9kZWxhZG8KICAgIHAgRXhpc3RlbiB2YXJpYXMgaGVycmFtaWVudGFzIHF1ZSBmYWNpbGl0YW4gZWwgZGlzZcOxbyB5IGxhIGdlc3Rpw7NuIGRlIGJhc2VzIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWxlcywgY2FkYSB1bmEgYWRhcHRhZGEgYSB1biB0aXBvIGVzcGVjw61maWNvIGRlIGRhdG9zLgogICAgICAgICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIudGV4dC1jZW50ZXIubWItNSAgICAKICAgICAgLmNvbC1sZy0zLm15LWxnLTAubXktMwogICAgICAgIC5iZzgucC00LmgtMTAwLmoxLmJyYWQKICAgICAgICAgIGltZy5pbWctYS5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDAucG5nJyBhbHQ9JycpICAgICAKICAgICAgICAgIGg1IE1vbmdvREIgQ29tcGFzcwoKICAgICAgICAgIHAubWItMCBVbmEgaGVycmFtaWVudGEgZ3LDoWZpY2EgcGFyYSBleHBsb3JhciB5IGFuYWxpemFyIGRhdG9zIGFsbWFjZW5hZG9zIGVuIE1vbmdvREIuIFBlcm1pdGUgdmlzdWFsaXphciBkb2N1bWVudG9zLCBlamVjdXRhciBjb25zdWx0YXMgeSBvcHRpbWl6YXIgw61uZGljZXMuCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICAuYmc4LnAtNC5oLTEwMC5qMS5icmFkCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQyLnBuZycgYWx0PScnKSAgICAgCiAgICAgICAgICBoNSBOZW80aiBCcm93c2VyCgogICAgICAgICAgcC5tYi0wIFV0aWxpemFkYSBwYXJhIG1vZGVsYXIgeSBjb25zdWx0YXIgZGF0b3MgZW4gdW5hIGJhc2UgZGUgZGF0b3MgZGUgZ3JhZm9zLiBPZnJlY2UgdW5hIGludGVyZmF6IGludGVyYWN0aXZhIGRvbmRlIHNlIHB1ZWRlbiBlamVjdXRhciBjb25zdWx0YXMgeSB2aXN1YWxpemFyIHJlbGFjaW9uZXMgY29tcGxlamFzIGVudHJlIG5vZG9zLgogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgLmJnOC5wLTQuaC0xMDAuajEuYnJhZAogICAgICAgICAgaW1nLmltZy1hLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80My5wbmcnIGFsdD0nJykgICAgIAogICAgICAgICAgaDUgQXBhY2hlIENhc3NhbmRyYQoKICAgICAgICAgIHAubWItMCBVdGlsaXphIG5vZG9zIGRpc3RyaWJ1aWRvcyB5IGVzIGV4Y2VsZW50ZSBwYXJhIG1hbmVqYXIgZ3JhbmRlcyBjYW50aWRhZGVzIGRlIGRhdG9zIGVuIHRpZW1wbyByZWFsLiBIZXJyYW1pZW50YXMgY29tbyBEYXRhU3RheCBTdHVkaW8gcGVybWl0ZW4gbW9kZWxhciB5IGFuYWxpemFyIGRhdG9zIG9yaWVudGFkb3MgYSBjb2x1bW5hcy4gIAogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgLmJnOC5wLTQuaC0xMDAuajEuYnJhZAogICAgICAgICAgaW1nLmltZy1hLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80NC5wbmcnIGFsdD0nJykgICAgIAogICAgICAgICAgaDUgUmVkaXNJbnNpZ2h0CgogICAgICAgICAgcC5tYi0wIFVuIHBhbmVsIGRlIGNvbnRyb2wgcGFyYSB2aXN1YWxpemFyIHkgYW5hbGl6YXIgZGF0b3MgZW4gUmVkaXMuIEF5dWRhIGEgb3B0aW1pemFyIGVsIHJlbmRpbWllbnRvIHkgZ2VzdGlvbmFyIGRhdG9zIGNsYXZlLXZhbG9yIGRlIG1hbmVyYSBlZmljaWVudGUuICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIgCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmcxMy50ZXh0LXdoaXRlLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzIucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5qMQogICAgICAgICAgICBwLm1iLTAgI1tiIEVqZW1wbG86XSBlbiB1bmEgZW1wcmVzYSBxdWUgbWFuZWphIG1pbGxvbmVzIGRlIHRyYW5zYWNjaW9uZXMgZmluYW5jaWVyYXMgZGlhcmlhcywgQXBhY2hlIENhc3NhbmRyYSBwb2Ryw61hIHNlciBsYSBoZXJyYW1pZW50YSBwcmVmZXJpZGEgZGViaWRvIGEgc3UgY2FwYWNpZGFkIGRlIGVzY2FsYXIgaG9yaXpvbnRhbG1lbnRlIHkgbWFuZWphciBkYXRvcyBlbiBtw7psdGlwbGVzIHNlcnZpZG9yZXMuICAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF8zXzQudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiAzLjQJVmVudGFqYXMgeSBkZXN2ZW50YWphcwogICAgcCBFbCB1c28gZGUgYmFzZXMgZGUgZGF0b3Mgbm8gcmVsYWNpb25hbGVzIHRpZW5lIHByb3MgeSBjb250cmFzIHF1ZSBkZWJlbiBldmFsdWFyc2UgYW50ZXMgZGUgbGEgaW1wbGVtZW50YWNpw7NuLgogICAgICAgICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNCAgCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ1LnBuZycgYWx0PScnKSAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgLmNvbC1sZy03Lm15LWxnLTAubXktMwogICAgICAgIC5iZzEucC00LmgtMTAwLmoxLmJyYWQKICAgICAgICAgIGg1IFZlbnRhamFzCiAgICAgICAgICB1bC5saXN0YS11bC5mYS11bAogICAgICAgICAgICBsaSAKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgc3BhbiAjW2IgRmxleGliaWxpZGFkOl0gbGFzIGJhc2VzIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWxlcyBwdWVkZW4gbWFuZWphciBkYXRvcyBzZW1pZXN0cnVjdHVyYWRvcywgbG8gcXVlIHBlcm1pdGUgY2FtYmlvcyByw6FwaWRvcyBlbiBlbCBlc3F1ZW1hIHNpbiBhZmVjdGFyIGxhIGJhc2UgZGUgZGF0b3MgY29tcGxldGEuIFBvciBlamVtcGxvLCBhZ3JlZ2FyIHVuIG51ZXZvIGNhbXBvIGEgdW4gZG9jdW1lbnRvIGVuIE1vbmdvREIgZXMgc2VuY2lsbG8uICAgCiAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICBzcGFuICNbYiBFc2NhbGFiaWxpZGFkIGhvcml6b250YWw6XSBzb24gZGlzZcOxYWRhcyBwYXJhIGRpc3RyaWJ1aXIgZGF0b3MgZW4gdmFyaW9zIHNlcnZpZG9yZXMsIGxvIHF1ZSBsYXMgaGFjZSBpZGVhbGVzIHBhcmEgYXBsaWNhY2lvbmVzIHF1ZSByZXF1aWVyZW4gYWx0YSBkaXNwb25pYmlsaWRhZCB5IGdyYW5kZXMgdm9sw7ptZW5lcyBkZSBkYXRvcy4gRWplbXBsbzogRmFjZWJvb2sgdXNhIGJhc2VzIGRlIGRhdG9zIGRlIGdyYWZvcyBwYXJhIG1hbmVqYXIgY29uZXhpb25lcyBlbnRyZSB1c3VhcmlvcyBhIGVzY2FsYSBtYXNpdmEuICAKICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgIHNwYW4gI1tiIEFsdG8gcmVuZGltaWVudG86XSBsYXMgb3BlcmFjaW9uZXMgZGUgbGVjdHVyYSB5IGVzY3JpdHVyYSBzdWVsZW4gc2VyIG11eSByw6FwaWRhcywgZXNwZWNpYWxtZW50ZSBlbiBiYXNlcyBkZSBkYXRvcyBjbGF2ZS12YWxvciBjb21vIFJlZGlzLiAgICAgICAgICAgICAgICAgICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTcubXktbGctMC5teS0zCiAgICAgICAgLmJnNS5wLTQuaC0xMDAuajEuYnJhZAogICAgICAgICAgaDUgRGVzdmVudGFqYXMKICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsCiAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICBzcGFuICNbYiBGYWx0YSBkZSBzb3BvcnRlIHBhcmEgdHJhbnNhY2Npb25lcyBjb21wbGVqYXM6XSBhIGRpZmVyZW5jaWEgZGUgbGFzIGJhc2VzIGRlIGRhdG9zIHJlbGFjaW9uYWxlcywgbGFzIG5vIHJlbGFjaW9uYWxlcyBhIG1lbnVkbyBjYXJlY2VuIGRlIHNvcG9ydGUgcGFyYSB0cmFuc2FjY2lvbmVzIEFDSUQgKEF0b21pY2lkYWQsIENvbnNpc3RlbmNpYSwgQWlzbGFtaWVudG8sIER1cmFiaWxpZGFkKSwgbG8gcXVlIHB1ZWRlIHNlciB1biBwcm9ibGVtYSBlbiBhcGxpY2FjaW9uZXMgZmluYW5jaWVyYXMuCiAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICBzcGFuICNbYiBDb25zaXN0ZW5jaWEgZXZlbnR1YWw6XSBlbiBzaXN0ZW1hcyBkaXN0cmlidWlkb3MsIGFsZ3VuYXMgYmFzZXMgZGUgZGF0b3MgTm9TUUwgZ2FyYW50aXphbiBsYSBjb25zaXN0ZW5jaWEgZXZlbnR1YWwgZW4gbHVnYXIgZGUgbGEgY29uc2lzdGVuY2lhIGlubWVkaWF0YSwgbG8gcXVlIHB1ZWRlIHNlciBwcm9ibGVtw6F0aWNvIHBhcmEgYXBsaWNhY2lvbmVzIHF1ZSByZXF1aWVyZW4gZGF0b3Mgc2llbXByZSBwcmVjaXNvcy4gCiAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICBzcGFuICNbYiBDdXJ2YSBkZSBhcHJlbmRpemFqZTpdIGFwcmVuZGVyIHkgb3B0aW1pemFyIGJhc2VzIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWxlcyBwdWVkZSBzZXIgY29tcGxpY2FkbywgZXNwZWNpYWxtZW50ZSBwYXJhIGFxdWVsbG9zIGFjb3N0dW1icmFkb3MgYSBsb3Mgc2lzdGVtYXMgcmVsYWNpb25hbGVzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ2LnBuZycgYWx0PScnKSAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIHAgI1tiIEVqZW1wbG86XSBlbiB1bmEgYXBsaWNhY2nDs24gZGUgcmVkZXMgc29jaWFsZXMsIGxhIGJhc2UgZGUgZGF0b3MgZGUgZ3JhZm9zIGNvbW8gTmVvNGogZXMgaWRlYWwgcGFyYSBnZXN0aW9uYXIgbGFzIGNvbmV4aW9uZXMgZW50cmUgdXN1YXJpb3MgeSBsYXMgcmVjb21lbmRhY2lvbmVzIGRlIGFtaWdvcy4gU2luIGVtYmFyZ28sIHBhcmEgbWFuZWphciB0cmFuc2FjY2lvbmVzIGZpbmFuY2llcmFzLCBzZSBwcmVmZXJpcsOtYSB1biBzaXN0ZW1hIHF1ZSBnYXJhbnRpY2UgbGEgY29uc2lzdGVuY2lhIGlubWVkaWF0YSwgY29tbyB1biBEQk1TIHJlbGFjaW9uYWwuIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLWxnLTEyCiAgICAgICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgICBoNSBUYWJsYSAyLiAKICAgICAgICAgIHNwYW4gQmFzZXMgZGUgZGF0b3MgcmVsYWNpb25hbGVzIHZzIGJhc2VzIGRlIGRhdG9zIG5vIHJlbGFjaW9uYWxlcwogICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgICAgICB0YWJsZQogICAgICAgICAgICBjYXB0aW9uIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgICAgICAgICB0aGVhZAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0aCBBc3BlY3RvCiAgICAgICAgICAgICAgICB0aCBCYXNlcyBkZSBEYXRvcyBSZWxhY2lvbmFsZXMKICAgICAgICAgICAgICAgIHRoIEJhc2VzIGRlIERhdG9zIE5vIFJlbGFjaW9uYWxlcwoKICAgICAgICAgICAgdGJvZHkKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQgTW9kZWxvIGRlIGRhdG9zICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBVdGlsaXphbiB1biBtb2RlbG8gYmFzYWRvIGVuIHRhYmxhcywgZG9uZGUgbG9zIGRhdG9zIHNlIG9yZ2FuaXphbiBlbiBmaWxhcyB5IGNvbHVtbmFzLiAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBVdGlsaXphbiBtb2RlbG9zIGRlIGRhdG9zIGZsZXhpYmxlcyBjb21vIGRvY3VtZW50b3MsIGdyw6FmaWNvcywgY2xhdmUtdmFsb3IgbyBjb2x1bW5hcy4KICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQgRXNxdWVtYSAgICAgICAgIAogICAgICAgICAgICAgICAgdGQgVGllbmVuIHVuIGVzcXVlbWEgcHJlZGVmaW5pZG8geSByw61naWRvLCBkb25kZSBzZSBkZWJlbiBkZWZpbmlyIGxhcyB0YWJsYXMgeSBsYXMgcmVsYWNpb25lcyBhbnRlcyBkZSBhZ3JlZ2FyIGRhdG9zLiAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBUaWVuZW4gdW4gZXNxdWVtYSBmbGV4aWJsZSBvIHNpbiBlc3F1ZW1hLCBwZXJtaXRpZW5kbyBhZ3JlZ2FyIGRhdG9zIHNpbiBlc3RydWN0dXJhcyBmaWphcy4gIAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZCBMZW5ndWFqZSBkZSBjb25zdWx0YSAgICAgICAgIAogICAgICAgICAgICAgICAgdGQgVXRpbGl6YW4gU1FMIChTdHJ1Y3R1cmVkIFF1ZXJ5IExhbmd1YWdlKSBwYXJhIGRlZmluaXIgeSBtYW5pcHVsYXIgZGF0b3MuICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBVdGlsaXphbiBkaWZlcmVudGVzIGxlbmd1YWplcyBkZSBjb25zdWx0YSBzZWfDum4gZWwgdGlwbywgY29tbyBKU09OLCBDUUwsIG8gR3JlbWxpbi4gIAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZCBFc2NhbGFiaWxpZGFkICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBFc2NhbGFiaWxpZGFkIHZlcnRpY2FsOiBhdW1lbnRhbiBzdSByZW5kaW1pZW50byBhw7FhZGllbmRvIG3DoXMgcG90ZW5jaWEgYWwgc2Vydmlkb3IuICAgICAgICAKICAgICAgICAgICAgICAgIHRkIEVzY2FsYWJpbGlkYWQgaG9yaXpvbnRhbDogcHVlZGVuIG1hbmVqYXIgZ3JhbmRlcyB2b2zDum1lbmVzIGRlIGRhdG9zIGRpc3RyaWJ1ecOpbmRvbG9zIGVuIG3Dumx0aXBsZXMgc2Vydmlkb3Jlcy4gIAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZCBUcmFuc2FjY2lvbmVzICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBTb3BvcnRhbiB0cmFuc2FjY2lvbmVzIEFDSUQgKEF0b21pY2lkYWQsIENvbnNpc3RlbmNpYSwgQWlzbGFtaWVudG8sIER1cmFiaWxpZGFkKSBwYXJhIGdhcmFudGl6YXIgbGEgaW50ZWdyaWRhZCBkZSBsb3MgZGF0b3MuICAgICAgICAKICAgICAgICAgICAgICAgIHRkIFNvcG9ydGFuIHRyYW5zYWNjaW9uZXMgQkFTRSAoQsOhc2ljYW1lbnRlIERpc3BvbmlibGUsIEVzdGFkbyBTdWF2ZSwgRXZlbnR1YWwgQ29uc2lzdGVuY2lhKSwgcHJpb3JpemFuZG8gbGEgZGlzcG9uaWJpbGlkYWQgeSBsYSBmbGV4aWJpbGlkYWQuICAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQgRWplbXBsb3MgICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBNeVNRTCwgUG9zdGdyZVNRTCwgT3JhY2xlLCBNaWNyb3NvZnQgU1FMIFNlcnZlciAgICAgICAgICAKICAgICAgICAgICAgICAgIHRkIE1vbmdvREIsIENhc3NhbmRyYSwgUmVkaXMsIE5lbzRqLCBDb3VjaGJhc2UKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQgVXNvIHByaW5jaXBhbCAgICAgICAgIAogICAgICAgICAgICAgICAgdGQgQWRlY3VhZGFzIHBhcmEgYXBsaWNhY2lvbmVzIGNvbiByZWxhY2lvbmVzIGNvbXBsZWphcyBlbnRyZSBkYXRvcyB5IHF1ZSByZXF1aWVyZW4gY29uc2lzdGVuY2lhIGVzdHJpY3RhLiAgICAgICAgIAogICAgICAgICAgICAgICAgdGQgSWRlYWxlcyBwYXJhIGFwbGljYWNpb25lcyBxdWUgbmVjZXNpdGFuIG1hbmVqYXIgZ3JhbmRlcyB2b2zDum1lbmVzIGRlIGRhdG9zLCBjb24gcmVxdWlzaXRvcyBkZSBmbGV4aWJpbGlkYWQgeSBhbHRhIGRpc3BvbmliaWxpZGFkLiAgIAogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZCBJbnRlZ3JpZGFkIGRlIGxvcyBkYXRvcyAgICAgICAgIAogICAgICAgICAgICAgICAgdGQgQWx0YSBpbnRlZ3JpZGFkIGRlYmlkbyBhIGxhIGVzdHJ1Y3R1cmEgcsOtZ2lkYSB5IGxhcyByZXN0cmljY2lvbmVzIHJlbGFjaW9uYWxlcy4gICAgICAgICAKICAgICAgICAgICAgICAgIHRkIE1lbm9yIGludGVncmlkYWQgcG9yIGxhIGZsZXhpYmlsaWRhZCwgcGVybyBjb24gbWF5b3IgY2FwYWNpZGFkIHBhcmEgbWFuZWphciBkYXRvcyBubyBlc3RydWN0dXJhZG9zLiAgCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkIFJlbGFjaW9uZXMgZW50cmUgZGF0b3MgICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBBZG1pbmlzdHJhbiByZWxhY2lvbmVzIG1lZGlhbnRlIGNsYXZlcyBwcmltYXJpYXMgeSBmb3LDoW5lYXMsIHBlcm1pdGllbmRvIHVuIG1vZGVsYWRvIHJlbGFjaW9uYWwgcm9idXN0by4gICAgICAgIAogICAgICAgICAgICAgICAgdGQgUHVlZGVuIG1hbmVqYXIgcmVsYWNpb25lcywgcGVybyBubyBkZSBsYSBtYW5lcmEgdHJhZGljaW9uYWw7IGFsZ3VuYXMgdXNhbiByZWZlcmVuY2lhcyBvIGVzdHJ1Y3R1cmFzIGVtYmViaWRhcy4gICAKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQgUmVuZGltaWVudG8gICAgICAgICAKICAgICAgICAgICAgICAgIHRkIFJlbmRpbWllbnRvIMOzcHRpbW8gcGFyYSBvcGVyYWNpb25lcyB0cmFuc2FjY2lvbmFsZXMgY29tcGxlamFzIHkgY29uc3VsdGFzIGVzdHJ1Y3R1cmFkYXMuICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBNZWpvciByZW5kaW1pZW50byBwYXJhIGNvbnN1bHRhcyByw6FwaWRhcyB5IG1hbmVqbyBkZSBkYXRvcyBtYXNpdm9zIGNvbiBhbHRhIGRpc3BvbmliaWxpZGFkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCg=="},null]}